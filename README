This is the repository for Linux Software Store.

For more information, see wiki/

All files which should be put in Web folder should be kept track of in Git.

All changes should be made locally and tested throughly on localhost,
then pushed to the origin repo.

File names should be lower-cased words concatencated with underscores (_)
Chinese characters are explictly prohibited for file names.
All files containing non-ASCII characters should be encoded in UTF-8.

If plain-text files are enough to describe a thing, please do not use
non-transparent binary formats generated by Word.
No Compressed files if not necessary, Git works well with files and folders.

===========================
The following is a simple routine of development with Git:

git config; 
git clone gitolite@blog.lug.ustc.edu.cn:software-$username.git;
git remote add czluck gitolite@blog.lug.ustc.edu.cn:software-czluck.git
while (true) {
        cd 工作目录
        git pull czluck // check project manager's code
        修改一些文件
        git status
        if (untracked or unstaged)
                git add . // 或者只添加指定的文件
        git commit -a -m "...."
        if (conflict) {
                手动修改发生冲突的文件
                git add 发生冲突的文件
                git commit -a -m "resolve conflict"
        }
        git push
        if (这是要上线的代码) {
                git pull czluck // check project manager's code
                邮件通知czluck来merge
        }
        一个开发周期结束
}

==========================
The following is for czluck (the project manager)

The product manager's master branch of repo on blog.ustc.edu.cn is
automatically put online. So be careful to push to master.

If someone sends you a pull request:
    cd working-dir
    if (first time to checkout his branch)
        git remote add $username gitolite@blog.lug.ustc.edu.cn:software-$username.git
    git fetch $username
    git checkout -b $username $username/master
    test whether or not the code runs well
    if (code is bad) {
        notify the one who have sent you the pull request
        git checkout master // return to my work
    } else {
        git checkout master
        git merge $username
        if (conflict)
            resolve conflicts
        git push
    }
